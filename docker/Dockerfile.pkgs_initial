
# this pipevfx_centos_pkgs image is the main parent image to build pipeVFX
# so we don't have to download packages all the time.

# we can also create new images based on this one to download new packages
# without having to re-download the ones in this image!

# ARG BASE_IMAGE
# FROM $BASE_IMAGE
FROM centos:7.6.1810

ARG http
ARG https

ENV http_proxy=$http
ENV https_proxy=$https

# yum parallel download
RUN [ ! -e /etc/yum/pluginconf.d/multithread.conf ] && \
    curl -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.py && \
    curl -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.conf && \
    mv ./multithread.py /usr/lib/yum-plugins && \
    mv ./multithread.conf /etc/yum/pluginconf.d/multithread.conf || \
    echo "done"

RUN [ ! -e /atomo/.root ] && yum clean all && yum makecache || echo done
RUN [ ! -e /atomo/.root ] && yum -y install epel-release || echo done
# remove mirrors from epel or else it will fail if there are no mirrors
# in the country the build machine is running
# RUN cat /etc/yum.repos.d/epel.repo \
#     | sed 's/.baseurl/baseurl/' \
#     | sed 's/metalink/#metalink/' > /tmp/epel.repo && \
#     /bin/mv /tmp/epel.repo /etc/yum.repos.d/epel.repo
RUN [ ! -e /atomo/.root ] && yum clean all && yum makecache && \
    yum -y install python2-scons wget git zip || echo "done"

#COPY docker/run.sh /run.sh
COPY pipeline/tools/scripts/pipevfx_docker_init.sh /run.sh

ADD pipeline/tools/python /atomo/pipeline/tools/python
ADD pipeline/tools/config /atomo/pipeline/tools/config
COPY pipeline/build/SConstruct /atomo/pipeline/build/SConstruct

# since we're having trouble with a gcc 4.1.2 built in centos
# (link complains about code needing -fPIC, when it was compiled with it!)
# we are adopting this quick and dirty solution, using a pre-compiled binary
# of gcc 4.1.2, done in an arch linux distro!
# this binaries work without issue, not complening about -fPIC.
COPY docker/gcc-bin-4.1.2.tgz       /atomo/pipeline/build/.download/4.1.2.tar.gz
COPY docker/setuptools-33.1.1.zip   /atomo/pipeline/build/.download/setuptools-33.1.1.zip

# copy over the latest packages from the latest pkg TAG image!
# this makes upload/download a large layer all the time,
# but prevents this image from being rebuild all the time when we add
# a new package.
# By copying over, we don't run into the "max depth exced" docker build error for
# having more than 125 layers, which happens a lot if we use the previous tag as base image.
# after building this image, we tag it as centos7_latest, so next build will
# pull the up2date cache from this build.
#
# WARNING: if building for the first time, comment this line out!
RUN mkdir -p /atomo/pipeline/build/.download/
COPY --from=hradec/pipevfx_pkgs:centos7_latest /atomo/pipeline/build/.download  /atomo/pipeline/build/.download/

# download packages so the image contain all tarballs.
RUN yum install -y python2-pip python3-pip
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    ( cat /etc/yum.repos.d/epel.repo \
     | sed 's/.baseurl/baseurl/' \
     | sed 's/metalink/#metalink/' > /tmp/epel.repo && \
     /bin/mv /tmp/epel.repo /etc/yum.repos.d/epel.repo ) && \
    export TERM=xterm && \
    export ftp_proxy=$http_proxy && \
    touch /atomo/.root && \
    mkdir -p /atomo/pipeline/build/ && \
    cd /atomo/pipeline/build && \
    env && \
    PYTHONPATH=/atomo/pipeline/tools/python \
    scons download -j $(( $(grep MHz /proc/cpuinfo | wc -l) * 2 ))
#|| true

RUN yum clean all
RUN rm -rf /var/cache/yum/*
RUN rm -rvf \
    /run.sh \
    /atomo/pipeline/tools/python \
    /atomo/pipeline/tools/config \
    /atomo/pipeline/build/SConstruct \
    /atomo/pipeline/build/.build

RUN touch /atomo/.root
