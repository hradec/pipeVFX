
# this pipevfx_centos_pkgs image is the main parent image to build pipeVFX
# so we don't have to download packages all the time.

# we can also create new images based on this one to download new packages
# without having to re-download the ones in this image!

ARG BASE_IMAGE
FROM $BASE_IMAGE
# FROM centos:7.6.1810
# FROM hradec/pipevfx_pkgs:centos7_latest

ARG http
ARG https

ENV http_proxy=$http
ENV https_proxy=$https


#COPY docker/run.sh /run.sh
COPY pipeline/tools/scripts/pipevfx_docker_init.sh /run.sh

ADD pipeline/tools/python /atomo/pipeline/tools/python
ADD pipeline/tools/config /atomo/pipeline/tools/config
COPY pipeline/build/SConstruct /atomo/pipeline/build/SConstruct

# since we're having trouble with a gcc 4.1.2 built in centos
# (link complains about code needing -fPIC, when it was compiled with it!)
# we are adopting this quick and dirty solution, using a pre-compiled binary
# of gcc 4.1.2, done in an arch linux distro!
# this binaries work without issue, not complening about -fPIC.
COPY docker/gcc-bin-4.1.2.tgz       /atomo/pipeline/build/.download/4.1.2.tar.gz
COPY docker/setuptools-33.1.1.zip   /atomo/pipeline/build/.download/setuptools-33.1.1.zip

RUN yum install -y zlib-devel which
RUN [ "$(which gcc)" == "" ] && yum group install -y "Development Tools" || true
RUN yum install -y openssl-devel libffi-devel
RUN yum clean all
RUN rm -rf /var/cache/yum/*

# download packages so the image contain all tarballs.
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    export TERM=xterm && \
    export ftp_proxy=$http_proxy && \
    touch /atomo/.root && \
    mkdir -p /atomo/pipeline/build/ && \
    cd /atomo/pipeline/build && \
    env && \
    rm -rf .download/pip? && \
    ( ls -1 .download/*{.tar,.zip}* > /tmp/xx ; ls -1 .download/ | grep -v pip | while read p ; \
        do [ "$(egrep $p /tmp/xx)" == "" ] && rm -vrf ".download/$p" ; \
        [ -d .download/$p ] && rm -vrf ".download/$p" ; \
    done ; rm /tmp/xx ) ; \
    rm -rfv .download/pip? ; \
    ls -l /atomo/pipeline/build/.download/ | wc -l && \
    export DOCKER_PYTHON=/python/ && \
    PYTHONPATH=/atomo/pipeline/tools/python scons download -j $(( $(grep MHz /proc/cpuinfo | wc -l) * 2 )) || true && \
    ( ls -1 .download/*{.tar,.zip}* > /tmp/xx ; ls -1 .download/ | grep -v pip | while read p ; \
        do [ "$(egrep $p /tmp/xx)" == "" ] && rm -vrf ".download/$p" ; \
        [ -d .download/$p ] && rm -vrf ".download/$p" ; \
    done ; rm /tmp/xx )

#    rm -rfv /python ; rm -rfv .download/pip* ; rm -rf /atomo/pipeline/build/.download/pip*/*/ ; \


RUN ls -l /atomo/pipeline/build/.download/pip*/*/

RUN rm -rvf \
    /run.sh \
    /atomo/pipeline/tools/python \
    /atomo/pipeline/tools/config \
    /atomo/pipeline/build/SConstruct \
    /atomo/pipeline/build/.build

RUN touch /atomo/.root
