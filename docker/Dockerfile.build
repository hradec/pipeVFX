
# we can use any centos as base image...
# but we choose to use the pipvfx_pkgs
# one since we have it!

ARG PACKAGES
ARG BASE_IMAGE
ARG http
ARG https

FROM $BASE_IMAGE
#FROM centos:7.6.1810


ENV http_proxy=$http
ENV https_proxy=$https
ENV package_image=$PACKAGES

# yum parallel download
RUN [ ! -e /etc/yum/pluginconf.d/multithread.conf ] && \
    curl -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.py && \
    curl -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.conf && \
    mv ./multithread.py /usr/lib/yum-plugins && \
    mv ./multithread.conf /etc/yum/pluginconf.d/multithread.conf || \
    echo "done"

RUN echo yum update -y && yum install -y csh tcsh xz \
    nano libXp libXmu libXpm libXi libtiff libpng12 \
    xorg-x11-server-Xorg xorg-x11-server-Xvfb xorg-x11-fonts* \
    libXinerama-devel libXext-devel libXrandr-devel libXi-devel \
    libXcursor-devel libXxf86vm-devel libXinerama \
    mesa-libGL-devel mesa-libGLU  mesa-libGLU-devel SDL \
    git gcc gcc-c++ make scons binutils elfutils dbus-devel glibc-devel \
    readline-devel dbus-glib-devel cmake yaml-cpp* tinyxml* enca \
    ncurses ncurses-devel ncurses-static libcurl-devel \
    flex-devel sqlite-devel libdb-devel gdbm-devel \
    zip wget vulkan-devel

RUN  yum install -y mesa-utils tkinter gstreamer-plugins-base.x86_64 gamin freetype2 python2-scons || true

# RUN yum groupinstall -y "X Window System" "Fonts"
RUN yum groupinstall -y "Development Tools" && fc-cache

RUN  [ ! -f /etc/fedora-release ] && yum -y install epel-release || true
# remove mirrors from epel or else it will fail if there are no mirrors
# in the country the build machine is running
# RUN cat /etc/yum.repos.d/epel.repo \
#     | sed 's/.baseurl/baseurl/' \
#     | sed 's/metalink/#metalink/' > /tmp/epel.repo && \
#     /bin/mv /tmp/epel.repo /etc/yum.repos.d/epel.repo
RUN  [ ! -f /etc/fedora-release ] && yum -y install centos-release-scl devtoolset-6 || true

RUN ln -s /lib64/libbz2.so.1 /lib64/libbz2.so.1.0 ; \
    ln -s libcrypto.so.1.0.2k /usr/lib64/libcrypto.so.10 ; \
    ln -s libcrypto.so.0.9.8e /usr/lib64/libcrypto.so.6 ; \
    ln -s libssl.so.1.0.2k /usr/lib64/libssl.so.10 ; \
    ln -s libssl.so.0.9.8e /usr/lib64/libssl.so.6 ; \
    ln -s /usr/bin/ar /usr/sbin/ar ; \
    ln -s /usr/bin/ranlib /usr/sbin/ranlib

#_tkinter           bsddb185           dl
#imageop            sunaudiodev

# add default to gcc 6.3.1 to /etc/bashrc, so running bash will automatically set it
# RUN printf "\nsource scl_source enable devtoolset-6\n" >> /etc/bashrc

#	Install OSL dependencies
RUN	yum install -y flex bison

# we need this to build python3
RUN yum -y install libffi-devel tcl-devel tk-devel libXt-devel gcc-objc++

#	Install Qt dependencies
RUN	yum install -y fontconfig-devel.x86_64
# and we need this for qt 5.x
RUN yum -y install xcb-util-wm-devel libxcb-devel.x86_64 \
    xcb-util-image-devel.x86_64 xcb-util-keysyms-devel.x86_64 \
    xcb-util-renderutil-devel.x86_64 xcb-util-wm-devel.x86_64 \
    xkeyboard-config.noarch

RUN yum -y install xcb*devel

# opencl
RUN yum -y install opencl-headers ocl-icd-devel || true

# cuda
# this package won't install from yum for some reason
# RUN yumPlugin=$(curl https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/ | grep yum-plugin | awk -F"'" '{print $4}' | sort  | tail -1) && \
#     curl -L https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/$yumPlugin -O && \
#     rpm -i $yumPlugin && \
#     rm -rf $yumPlugin
#
# RUN yum-config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo && \
#     yum clean all && \
#     yum -y install nvidia-driver-latest-dkms cuda cuda-drivers

# to get colors in the build log.
RUN yum -y install source-highlight

# add strace
RUN yum -y install strace

# we need this for alembic opengl with maya
RUN yum -y install libXmu-devel

# we need inkscape for gaffer
RUN yum -y install inkscape wget git zip

# we need pulseaudio to run maya
RUN yum -y install pulseaudio

# we need this for pygobject
RUN yum -y install cairo-devel \
    gobject-introspection-devel cairo-gobject-devel

# we need this to build pythonldap
RUN yum -y install openldap-devel

# maya needs this to run with audio
RUN yum -y install audiofile-devel

# install python2 scons
RUN yum -y install python2
RUN python2 -m ensurepip || yum -y install python2-pip || yum install -y python-pip
RUN python2 -m pip install SCons || /usr/bin/python2 -m pip install SCons || ls -l /usr/bin/pip*

# fedora expecific packages needed when building with fedora
RUN [ -f /etc/fedora-release ] && yum -y install \
    lbzip2 \
    rsync \
    expat-devel \
    sphinx || yum -y install \
    rsync \
    expat-devel \
    sphinx
RUN python2 -m pip install sphinx || true

# to avoid clashing in osl
# RUN yum -y remove boost
# RUN yum -y reinstall boost-filesystem

# cleanup
RUN yum -y install sudo
RUN yum -y install patchelf
RUN yum clean all
RUN rm -rf /var/cache/yum/*

# copy over the latest packages from the latest pkg TAG image!
# this makes upload/download a large layer all the time,
# but prevents this image from being rebuild all the time when we add
# a new package.
RUN mkdir -p /atomo/pipeline/build/.download/
COPY --from=hradec/pipevfx_pkgs:centos7_latest /atomo/pipeline/build/.download  /atomo/pipeline/build/.download/

RUN yum -y reinstall  boost boost-filesystem inkscape || true

# qt 5.15 now needs these!!
RUN yum -y install libxkbcommon-devel libxkbcommon-x11-devel || true

# we need mesa to build gaffer
RUN yum -y install mesa-dri-drivers
RUN yum -y install mesa-libGLw


# # Gaffer Cycles
# # =============================================================================
# #
# # CUDA 11.5.1
# #
# RUN	wget -O cuda.rpm https://developer.download.nvidia.com/compute/cuda/11.5.1/local_installers/cuda-repo-rhel7-11-5-local-11.5.1_495.29.05-1.x86_64.rpm --progress=dot:mega \
# 	&& rpm -i cuda.rpm && yum install -y cuda && rm cuda.rpm
# #
# # ISPC 1.16.1
# #
# RUN wget -O ispc.tar.gz https://github.com/ispc/ispc/releases/download/v1.16.1/ispc-v1.16.1-linux.tar.gz -- \
# 	&& mkdir /ispc && tar xf ispc.tar.gz -C /ispc --strip-components=1 && mv /ispc/bin/ispc /usr/bin/ispc && rm -rf /ispc
# #
# # OptiX 7.4.0
# #
# COPY NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh /
# RUN mkdir /optix && chmod +x NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh && ./NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh --skip-license --prefix=/optix --exclude-subdir
# #
# # ROCm/HIP 4.5
# #
# RUN echo -e "[ROCm]\nname=ROCm\nbaseurl=https://repo.radeon.com/rocm/yum/4.5\nenabled=1\ngpgcheck=0" >> /etc/yum.repos.d/rocm.repo \
# 	&& yum install -y rocm-dev rocm-libs
# # =============================================================================


RUN [ -f /etc/centos-release ] && yum -y install python2-scons || true

RUN yum install -y dbus-daemon

# maya
RUN yum install -y libpng15 \
    xorg-x11-fonts-ISO8859-1-100dpi \
    xorg-x11-fonts-ISO8859-1-75dpi \
    liberation-mono-fonts \
    liberation-fonts-common \
    liberation-sans-fonts \
    liberation-serif-fonts \
    libXmu libXt libXi libXinerama libxcb tcsh \
    audiofile audiofile-devel \
    libpng15  \
    audiofile audiofile-devel e2fsprogs-libs libpng12 \
    x11vnc xrdp mesa-libGLw mesa-libGLU libXp \
    libXcursor-devel \
    libXrandr-devel \
    libXinerama-devel \
    libXi-devel \
    mesa-libGLU-devel \
    libuuid-devel

RUN ln -s /lib64/libssl.so /lib64/libssl.so.10 && \
    ln -s /lib64/libcrypto.so /lib64/libcrypto.so.10 && \
    ln -s /lib64/libtinfo.so.6 /lib64/libtinfo.so.5 && \
    ln -s /lib64/libnsl.so.2 /lib64/libnsl.so.1


RUN yum clean all
ENV TERM=xterm
ENTRYPOINT "/run.sh"

# download packages so the image contain all tarballs.
# RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
#     export TERM=xterm && \
#     export ftp_proxy=$http_proxy && \
#     touch /atomo/.root && \
#     mkdir -p /atomo/pipeline/build/ && \
#     cd /atomo/pipeline/build && \
#     ln -s $(which python2) /bin/python && \
#     env && \
#     PYTHONPATH=/atomo/pipeline/tools/python \
#     scons download -j $(( $(grep MHz /proc/cpuinfo | wc -l) * 2 ))
