#!/usr/bin/python2
# =================================================================================
#    This file is part of pipeVFX.
#
#    pipeVFX is a software system initally authored back in 2006 and currently
#    developed by Roberto Hradec - https://bitbucket.org/robertohradec/pipevfx
#
#    pipeVFX is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    pipeVFX is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with pipeVFX.  If not, see <http://www.gnu.org/licenses/>.
# =================================================================================

import sys, os, traceback, glob

# get the pipeline path from this file path
this_sconscript_file = os.path.abspath((lambda x:x).func_code.co_filename)
pipelinePath = '/'.join(this_sconscript_file.split('/')[:-2])
sys.path.insert( 0, os.path.abspath('%s/tools/python/' % pipelinePath) )

# build all pkgs, if not already built!
import build
pkgs = build.pkgs.all(ARGUMENTS) # noqa


# get installed app versions using pipe
import pipe

USD_VERSION='21.5.0'
BOOST_VERSION='1.66.0'

# ===========================================================================================
# build gaffer without any app support first!
# ===========================================================================================
cortex = build.cortex(boost=BOOST_VERSION, usd=USD_VERSION, pkgs=pkgs)
gaffer = build.gaffer(boost=BOOST_VERSION, usd=USD_VERSION, pkgs=pkgs)


# ===========================================================================================
# FROM HERE, WE DEAL WITH THIRDY-PARTIE APPS
# ===========================================================================================
# we need libraries built to detect installed apps, so if we don't have then yet,
# we cant build app dependent packages.
canBuildCortexNow = False
try:
    # grab version lists
    try: pv = [ x for x in build.pkgs.versionSort( pipe.apps.prman().versionList() ) if float(x.split('.')[0])>=21 ]
    except: pv = []
    try: mv = [ x for x in build.pkgs.versionSort( pipe.apps.maya().versionList()  ) if float(x.split('.')[0])>2016 ]
    except: mv = []
    try: nv = [ x for x in build.pkgs.versionSort( pipe.apps.nuke().versionList()  ) if float(x.split('.')[0])>=9 ]
    except: nv = []
    try: hv = build.pkgs.versionSort( pipe.apps.houdini().versionList() )[-2:]
    except: hv = []
    try: av = [ x for x in build.pkgs.versionSort( pipe.apps.arnold().versionList() ) if float(x.split('.')[0])>=7 ]
    except: av = []

    # we check if we can resolv the maya app class for the
    # available maya versions we have.
    for n in range(len(mv)):
        version = 0
        version = mv[0] if len(mv)<=n else mv[n]
        pipe.version.set( maya  = version )
        pipe.apps.maya().path('bin/maya.bin')

    if mv:
        canBuildCortexNow = True
except:
    print '''

    It seems we don't have libraries built yet, so we can't build app dependent pkgs yet! (ex: cortex,alembic, usd, openvdb, etc)
    Run scons install again after this build finishes to complete the build!

    '''
    traceback.print_exc()

print "canBuildAppsNow:",canBuildCortexNow
# ok, so we do have the libraries built, so now lets do app dependent packages!!
if canBuildCortexNow:
    nuke    = pipe.apps.nuke()
    maya    = pipe.apps.maya()
    prman   = pipe.apps.prman()
    houdini = pipe.apps.houdini()
    arnold  = pipe.apps.arnold()

    # ===========================================================================================
    # ARNOLD
    # ===========================================================================================
    # build  arnold for gaffer
    for version in av:
        pipe.version.set( arnold  = version )
        gaffer = build.gaffer(boost=BOOST_VERSION, usd=USD_VERSION, pkgs=pkgs, apps=[ (pipe.apps.arnold, version) ])

    # ===========================================================================================
    # MAYA
    # ===========================================================================================
    pkgs.maya_sip = {}
    pkgs.maya_pyqt = {}
    pkgs.maya_usd = {}
    pkgs.maya_alembic = {}
    pkgs.maya_openvdb = {}
    maya_dependency = {}
    # maya_dependency['2016.5'] = { 'usd' : USD_VERSION, 'boost' : '1.61.0' }
    maya_dependency['2022'  ] = { 'usd' : USD_VERSION, 'boost' : '1.66.0' }
    maya_dependency['2022.2'] = { 'usd' : USD_VERSION, 'boost' : '1.66.0' }
    for mv in maya_dependency:
        version = mv
        pipe.version.set( maya  = version )

        iversion = int(build.versionMajor(version))
        targetSuffix = "maya.%s" % str(version)

        build.s_print( pipe.apps.maya().path('bin/maya.bin'), mv, targetSuffix )

        # maya cortex and gaffer
        cortex = build.cortex(boost=BOOST_VERSION, usd=USD_VERSION, pkgs=pkgs, apps=[(pipe.apps.maya, version)])
        # gaffer = build.gaffer(boost=BOOST_VERSION, usd=USD_VERSION, pkgs=pkgs, apps=[(pipe.apps.maya, version)])

        # maya USD plugins
        boost_sufix = "boost.%s" % maya_dependency[version]['boost']
        usd = pkgs.usd[boost_sufix][ maya_dependency[version]['usd'] ]
        if not hasattr(pkgs, "mayausd"):
            pkgs.mayausd = {}
        pkgs.mayausd[targetSuffix] = build.cmake(
            ARGUMENTS,
            'mayausd',
            targetSuffix=targetSuffix,
            download=[(
                'https://github.com/Autodesk/maya-usd/archive/refs/tags/v0.16.0.tar.gz',
                'maya-usd-0.16.0.tar.gz',
                '0.16.0',
                '906e3041a8b07589d36e1c25cd7cca58',
                {   pkgs.gcc : '6.3.1',
                    usd.obj : usd.version,
                    usd['boost'     ].obj : usd['boost'     ].version,
                    usd['materialx' ].obj : usd['materialx' ].version,
                    usd['qt'        ].obj : usd['qt'        ].version,
                }
            )],
            apps = [(pipe.apps.maya, version)],
            cmd=[
                '''sed -i.bak -e 's/^........sys.exit.1./    return "release","nogit"/' ./build.py''',
                'python build.py -v 2 --install-location $INSTALL_FOLDER '
                    '--maya-location $MAYA_ROOT '
                    '--pxrusd-location $USD_TARGET_FOLDER '
                    '--devkit-location $MAYA_ROOT/devkit '
                    '--qt-location $QT_TARGET_FOLDER '
                    '--build-args "\-DMAYA_EXECUTABLE=$MAYA_ROOT/bin/maya.bin" '
                    '-j $DCORES .',
            ]
        )
        build.github_phase_one_version(ARGUMENTS, depend=[pkgs.mayausd[targetSuffix]])



        # # ===========================================================================================
        # # build sip/pyqt for maya version!
        # # for maya 2018 we're building pyside using autodesk qt 5.6.1
        # # so we don't need maya to build it!
        # # ===========================================================================================
        # if iversion > 2016 and iversion < 2018:
        #     pkgs.maya_sip.update({ targetSuffix : build.pythonSetup(
        #         ARGUMENTS,
        #         'sip',
        #         targetSuffix = targetSuffix,
        #         download=[(
        #             'https://sourceforge.net/projects/pyqt/files/sip/sip-4.16.7/sip-4.16.7.tar.gz',
        #             'sip-4.16.7.tar.gz',
        #             '4.16.7',
        #             '32abc003980599d33ffd789734de4c36',
        #             { pkgs.gcc : '6.3.1' }
        #         )],
        #         src = 'configure.py',
        #         apps = [ (pipe.apps.maya, version) ],
        #         cmd = [
        #             # 'export MAYA_LOCATION=$(/bin/python2 -c "import pipe;print pipe.roots.apps()")/maya/%s' % version,
        #             'mayapy configure.py '
        #             '-b $TARGET_FOLDER/bin '
        #             '-d $TARGET_FOLDER/lib/python$PYTHON_VERSION_MAJOR/site-packages/ '
        #             '-e $TARGET_FOLDER/include/python$PYTHON_VERSION_MAJOR/ '
        #             '-v $TARGET_FOLDER/share/sip/ '
        #             'CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ',
        #             'make -j $DCORES && make -j $DCORES install',
        #         ],
        #         environ = {
        #             'MAYA_EXECUTABLE'   : pipe.apps.maya().path('bin/maya.bin'),
        #             'MAYA_LOCATION'     : pipe.apps.maya().path(),
        #             'MAYA_ROOT'         : pipe.apps.maya().path(),
        #             'PATH'              : '%s:$PATH' % pipe.apps.maya().path('bin'),
        #         },
        #     )})
        #     pkgs.maya_pyqt.update({ targetSuffix : build.pythonSetup(
        #         ARGUMENTS,
        #         'pyqt',
        #         targetSuffix = targetSuffix,
        #         download=[(
        #             'https://svwh.dl.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz',
        #             'PyQt-x11-gpl-4.11.4.tar.gz',
        #             '4.11.4',
        #             '2fe8265b2ae2fc593241c2c84d09d481',
        #             {pkgs.maya_sip[targetSuffix]: '4.16.7.maya%s' % version, pkgs.gcc : '6.3.1'},
        #         )],
        #         apps = [ (pipe.apps.maya, version) ],
        #         # baseLibs=[pkgs.python],
        #         # src = 'configure-ng.py',
        #         # cmd = [
        #         #     # 'python configure-ng.py --confirm-license --assume-shared --protected-is-public --designer-plugindir=$QT_TARGET_FOLDER/plugins/designer/ --sysroot=$TARGET_FOLDER CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"',
        #         #     '''export PYTHON_VERSION_MAJOR=$(mayapy --version 2>&1 | awk '{split($2,a,"."); print a[1] "." a[2] }')'''
        #         #     'export QTDIR=$MAYA_LOCATION',
        #         #     'export QMAKESPEC=$MAYA_LOCATION/mkspecs/linux-g++-64',
        #         #     'export INCDIR_QT=$MAYA_LOCATION/include',
        #         #     'export LIBDIR_QT=$MAYA_LOCATION/lib',
        #         #     'export PATH=$MAYA_LOCATION/bin:$PATH',
        #         #     'mayapy configure.py --confirm-license --assume-shared --verbose --no-designer-plugin '
        #         #     '-b $TARGET_FOLDER/bin '
        #         #     '-d $TARGET_FOLDER/lib/python$PYTHON_VERSION_MAJOR/site-packages/ '
        #         #     '-v $TARGET_FOLDER/share/sip/PyQt4 '
        #         #     'CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" '
        #         #     'LIBDIR_QT=$MAYA_LOCATION/lib INCDIR_QT=$MAYA_LOCATION/include MOC=$MAYA_LOCATION/bin/moc -w -g ',
        #         #     'make -j $DCORES CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ',
        #         #     'make -j $DCORES CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" install',
        #         # ],
        #         environ = {
        #             'MAYA_EXECUTABLE'   : pipe.apps.maya().path('bin/maya.bin'),
        #             'MAYA_LOCATION'     : pipe.apps.maya().path(),
        #             'MAYA_ROOT'         : pipe.apps.maya().path(),
        #             'PATH'              : '%s:$PATH' % pipe.apps.maya().path('bin'),
        #         },
        #     )})

        # build plugins
        # if iversion > 2017:
        #     # ===========================================================================================
        #     # MAYA USD
        #     # ===========================================================================================
        #     cortex_sufix = "boost.%s" % maya_dependency[version]['boost']
        #     usd = pkgs.usd[cortex_sufix][maya_dependency[version]['usd']].obj
        #     maya_environ = usd.environ.copy()
        #     maya_environ.update({
        #         'MAYA_EXECUTABLE'   : pipe.apps.maya().path('bin/maya.bin'),
        #         'MAYA_LOCATION'     : pipe.apps.maya().path(),
        #         'MAYA_ROOT'         : pipe.apps.maya().path(),
        #         'LDFLAGS'           : usd.environ['LDFLAGS'],
        #         'CFLAGS'            : usd.environ['CFLAGS'],
        #         'CXXFLAGS'          : usd.environ['CXXFLAGS'].replace('-lboost_program_options',''),
        #         'LD'                : usd.environ['LDFLAGS'],
        #         'LD_PRELOAD'        : usd.environ['LD_PRELOAD'],
        #         'DCORES'            : '$CORES',
        #     })
        #     __download = [ x for x in usd.download if build.versionMajor(x[2]) >= maya_dependency[version]['usd'] ]
        #     # remove usd and alembic
        #     for n in range(len(__download)):
        #         # set the version of openvdb for all versions of cortex.
        #         __download[n][4] = __download[n][4].copy()
        #         __download[n][4][ pkgs.gcc       ] = '6.3.1'
        #
        #     pkgs.maya_usd.update({ targetSuffix : build.cmake(
        #         ARGUMENTS,
        #         'usd',
        #         sed = usd.sed,
        #         targetSuffix = targetSuffix,
        #         download = __download,
        #         depend = [ x for x in usd.depend if x.name not in ['tbb','pyside','ptex','opensubdiv'] ],
        #         cmd = [ x.replace('make ', 'make VERBOSE=1 ') for x in usd.cmd ],
        #         apps = [ (pipe.apps.maya, str(version)) ],
        #         environ = maya_environ,
        #         flags=usd.flags+[
        #             '-D PXR_BUILD_MAYA_PLUGIN=ON',
        #             '-D PXR_BUILD_MATERIALX_PLUGIN=ON',
        #             '-D OpenGL_GL_PREFERENCE=GLVND',
        #             '-D MAYA_EXECUTABLE="'+pipe.apps.maya().path('bin/maya.bin')+'"',
        #             '-D MAYA_PY_EXECUTABLE="'+pipe.apps.maya().path('bin/mayapy')+'"',
        #             '-D VERBOSE=1',
        #         ],
        #     )})
            # pkgs.maya_usd.update({ targetSuffix : build.cmake(
            #     ARGUMENTS,
            #     'usd_brides',
            #     targetSuffix = targetSuffix,
            #     download = [(
            #         'https://github.com/Autodesk/maya-usd/archive/v0.0.2.tar.gz',
            #         'maya-usd-0.0.2.tar.gz',
            #         '0.0.2',
            #         '547214e0213dd9bac705b09d7a341e5f',
            #         # use usd dependency versions to build this
            #         usd.download[-1][4].copy(),
            #     )],
            #     depend = usd.depend+[usd],
            #     apps = [ (pipe.apps.maya, str(version)) ],
            #     environ = maya_environ,
            #     flags = [
            #         '-DBUILD_AL_PLUGIN=0',
            #         '-DBUILD_PXR_PLUGIN=1',
            #         '-DPXR_USD_LOCATION=$USD_TARGET_FOLDER',
            #     ]
            # )})
#
#
#
#             # ===========================================================================================
#             # MAYA ALEMBIC
#             # ===========================================================================================
#             for alembic_version in pkgs.alembic[cortex_sufix].versions:
#                 if build.versionMajor(alembic_version) <= 1.5 and build.versionMajor(version) >= 2018:
#                     continue
#
#                 maya_environ = pkgs.alembic[cortex_sufix].environ.copy()
#                 maya_environ.update({
#                     'CFLAGS'    : ' -std=c++11 $CFLAGS ',
#                     'CXXFLAGS'  : ' -DALEMBIC_LIB_USES_BOOST=1 -std=c++11 $CXXFLAGS ',
#                     'LDFLAGS'   : '$LDFLAGS ' + pkgs.exr_rpath_environ['LDFLAGS'],
#                     # 'LDFLAGS'   : ' $LDFLAGS -lpthread'
#                 })
#                 # _download = []+[ x for x in pkgs.alembic[cortex_sufix].download if x[2] == alembic_version ]
#                 _download = pkgs.alembic[cortex_sufix].downloadVersion(alembic_version)
#                 for n in range(len(_download)):
#                     _download[n][4] = _download[n][4].copy()
#                     _download[n][4][pkgs.gcc] = '6.3.1'
#                     if build.versionMajor(version)>=2018:
#                         _download[n][4][pkgs.gcc] = '6.3.1'
#                         _download[n][4][pkgs.boost] = '1.61.0'
#
#                 pkgs.maya_alembic.update({ targetSuffix : build.alembic(
#                     ARGUMENTS,
#                     'alembic',
#                     targetSuffix = targetSuffix,
#                     sed = pkgs.alembic[cortex_sufix].sed,
#                     baseLibs = pkgs.alembic[cortex_sufix].baseLibs,
#                     download = _download,
#                     depend = pkgs.alembic[cortex_sufix].depend + [pkgs.openssl],
#                     cmd = pkgs.alembic[cortex_sufix].cmd,
#                     apps = [ (pipe.apps.maya, str(version)) ],
#                     environ = maya_environ,
#                     flags = ['-DUSE_MAYA=1', '-DMAYA_ROOT=$MAYA_ROOT'],
#                 )})
#
#
#             # ===========================================================================================
#             # MAYA OPENVDB
#             # ===========================================================================================
#             # pkgs.maya_openvdb.update({ targetSuffix : build.make(
#             #     ARGUMENTS,
#             #     'openvdb',
#             #     targetSuffix = "maya%s" % str(version),
#             #     download = pkgs.openvdb.download,
#             #     depend = pkgs.openvdb.depend,
#             #     cmd = ['cd openvdb_maya']+pkgs.openvdb.cmd[1:],
#             #     environ = {
#             #         'MAYA_VERSION' : str(version),
#             #         'MAYA_ROOT' : pipe.apps.maya().path(),
#             #     },
#             # )})
#
#     # ===========================================================================================
#     # PRMAN
#     # ===========================================================================================
#     # pkgs.prman_usd = {}
#     # pkgs.prman_alembic = {}
#     # for n in range(len(pv)):
#     #     version = 0
#     #     if pv:
#     #         version = pv[0] if len(pv)<=n else pv[n]
#     #         pipe.version.set( prman  = version )
#     #
#     #     if version:
#     #         targetSuffix = "prman.%s" % str(version)
#     #         pkgs.prman_usd[targetSuffix] = build.cmake(
#     #             ARGUMENTS,
#     #             'usd',
#     #             sed = pkgs.usd.sed,
#     #             targetSuffix = targetSuffix,
#     #             download = pkgs.usd.download,
#     #             depend = pkgs.usd.depend+[pkgs.usd],
#     #             cmd = pkgs.usd.cmd,
#     #             apps = [ (pipe.apps.prman, str(version)) ],
#     #             environ = pkgs.usd.environ,
#     #             flags=pkgs.usd.flags+[ '-D PXR_BUILD_PRMAN_PLUGIN=1' ],
#     #         )
#     #         # pkgs.prman_alembic += [build.alembic(
#             #     ARGUMENTS,
#             #     'alembic',
#             #     targetSuffix = "prman%s" % str(version),
#             #     baseLibs = pkgs.alembic[cortex_sufix].baseLibs,
#             #     download = pkgs.alembic[cortex_sufix].download,
#             #     depend = pkgs.alembic[cortex_sufix].depend,
#             #     cmd = pkgs.alembic[cortex_sufix].cmd,
#             #     apps = [ (pipe.apps.prman, str(version)) ],
#             #     flags = ['-DUSE_PRMAN=1', '-DPRMAN_ROOT=$MAYA_ROOT'],
#             # )]
#
#
#     # ===========================================================================================
#     # CORTEX MAYA
#     # ===========================================================================================
#     usd     = None #pkgs.usd.download[-1][2]
#     alembic = None #pkgs.alembic[cortex_sufix].download[-1][2]
#     openvdb = None #pkgs.openvdb.download[-1][2]
#     for version in mv:
#         sufix = "core.maya.%s" % version
#
#         _download = []+download
#         # maya less than 2018 uses cortex 9
#         _download = [ []+x for x in download if build.versionMajor(x[2]) >= 10.0 ]
#         if float(version) < 2018:
#             _download = [ []+x for x in download if build.versionMajor(x[2]) < 10.0 ]
#
#         # set the versions of depency to build cortex
#         for n in range(len(_download)):
#             # set the cortex build with the boost version of choice, using the same cortex version.
#             cortexVersion   = _download[n][2]
#             boostVersion    = _download[n][4][pkgs.boost]
#             _download[n][4] = _download[n][4].copy()
#             # as we mangle vdb, usd and alembic inside cortex (we don't use the
#             # targetSuffix) we can only specify the main core cortex build here,
#             # and cortex_options.pywill take care of setting the libs paths for
#             # everything according with the specified boost version.
#             # we specify "boost.<boost version" so this build has a dependency
#             # with cortex core boost version.
#             _download[n][4][ pkgs.boost    ] = boostVersion
#             _download[n][4][ cortex        ["boost.%s" % boostVersion] ] = cortexVersion
#             _download[n][4][ pkgs.ilmbase  ['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.openexr  ['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.pyilmbase['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.gcc      ] = '6.3.1' if build.versionMajor(boostVersion) < 1.61 else '6.3.1'
#             _download[n][4][ pkgs.usd      ] = usd
#             _download[n][4][ pkgs.alembic[cortex_sufix]  ] = alembic
#             _download[n][4][ pkgs.openvdb  ] = openvdb
#             # we use different OIIO versions for cortex 9 and 10
#             if build.versionMajor(_download[n][2]) < 10.0:
#                 _download[n][4][ pkgs.oiio['boost.%s' % boostVersion]] = '1.6.15'
#             else:
#                 _download[n][4][ pkgs.oiio['boost.%s' % boostVersion]] = '1.8.10'
#
#
#         # now build the version of cortex with the openvdb version
#         pkgs.cortex[sufix] = build.cortex(
#             ARGUMENTS, # noqa
#             'cortex',
#             targetSuffix = sufix,
#             download = _download,
#             sed = build.cortex.noIECoreSED(),
#             # baseLibs = [pkgs.python],
#             depend = depend+[pkgs.python],
#             patch = devPatch,
#             dontUseTargetSuffixForFolders = 1,
#             apps = [ (pipe.apps.maya, str(version)) ],
#             cmd = [
#                 build.cortex.cmd[0]+"install",
#             ],
#             environ = {
#                 'LDFLAGS': pkgs.exr_rpath_environ['LDFLAGS'],
#             },
#         )
#
#     # ===========================================================================================
#     # CORTEX PRMAN
#     # ===========================================================================================
#     for version in pv:
#         sufix = "core.prman.%s" % version
#
#         # prman 22 needs cortex 10, and prman 21 or less, cortex 9
#         _download = [ []+x for x in download if build.versionMajor(x[2]) >= 10.0 ]
#         if float(version) < 22:
#             _download = [ []+x for x in download if build.versionMajor(x[2]) < 10.0 ]
#
#         # set the versions of depency to build cortex for prman
#         for n in range(len(_download)):
#             # set the cortex build with the boost version of choice, using the same cortex version.
#             cortexVersion   = _download[n][2]
#             boostVersion    = _download[n][4][pkgs.boost]
#             _download[n][4] = _download[n][4].copy()
#             # as we mangle vdb, usd and alembic inside cortex (we don't use the
#             # targetSuffix) we can only specify the main core cortex build here,
#             # and cortex_options.pywill take care of setting the libs paths for
#             # everything according with the specified boost version.
#             # we specify "boost.<boost version" so this build has a dependency
#             # with cortex core boost version.
#             _download[n][4][ pkgs.boost    ] = boostVersion
#             _download[n][4][ cortex        ["boost.%s" % boostVersion] ] = cortexVersion
#             _download[n][4][ pkgs.ilmbase  ['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.openexr  ['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.pyilmbase['boost.%s' % boostVersion] ] = exr_version
#             _download[n][4][ pkgs.gcc      ] = '6.3.1' if build.versionMajor(boostVersion) < 1.61 else '6.3.1'
#             _download[n][4][ pkgs.usd      ] = usd
#             _download[n][4][ pkgs.alembic[cortex_sufix]  ] = alembic
#             _download[n][4][ pkgs.openvdb  ] = openvdb
#             # we use different OIIO versions for cortex 9 and 10
#             if build.versionMajor(_download[n][2]) < 10.0:
#                 _download[n][4][ pkgs.oiio['boost.%s' % boostVersion]] = '1.6.15'
#             else:
#                 _download[n][4][ pkgs.oiio['boost.%s' % boostVersion]] = '1.8.10'
#
#         # now build the version of cortex
#         pkgs.cortex[sufix] = build.cortex(
#             ARGUMENTS, # noqa
#             'cortex',
#             targetSuffix = sufix,
#             download = _download,
#             sed = build.cortex.noIECoreSED(),
#             # baseLibs = [pkgs.python],
#             depend = depend+[pkgs.python],
#             patch = devPatch,
#             dontUseTargetSuffixForFolders = 1,
#             apps = [( pipe.apps.prman, version )],
#             cmd = [
#                 build.cortex.cmd[0]+"installRI",
#             ],
#             environ = {
#                 'LDFLAGS': '$LDFLAGS ' + pkgs.exr_rpath_environ['LDFLAGS'],
#             },
#         )
#
#     # ===========================================================================================
#     # GAFFER PRMAN
#     # ===========================================================================================
#     # now use prman versions to build gaffer against
#     # for version in pv:
#     #     if float(version) > 21.4:
#     #         boost="1.61.0"
#     #         download = None
#     #         if float(version) >= 23.0:
#     #             download = [[
#     #                 'https://github.com/johnhaddon/gaffer/archive/renderMan.zip',
#     #                 'gaffer-0.54.0.0.tar.gz',
#     #                 '0.54.0.prman',
#     #                 '876127bfe6fd62ab9d6a8a9e6da2f75f',
#     #                 {pkgs.alembic[cortex_sufix] : "1.7.11", pkgs.ocio: '1.0.9',
#     #                 pkgs.pyside: '2.0.18', pkgs.pyqt: None,
#     #                 pkgs.llvm: '10.0.1', pkgs.gcc : '6.3.1' if build.versionMajor(boost) < 1.61 else '6.3.1',
#     #                 pkgs.openvdb: '6.0.0', pkgs.tbb: '4.4.6',
#     #                 pkgs.boost : boost,
#     #                 pkgs.openexr['boost.%s' % boost] : exr_version,
#     #                 pkgs.ilmbase['boost.%s' % boost] : exr_version,
#     #                 pkgs.pyilmbase['boost.%s' % boost] : exr_version,
#     #                 pkgs.oiio['boost.%s' % boost]: '1.8.10',
#     #                 pkgs.cortex[cortex_build] : cortex10version}
#     #             ]]
#     #
#     #         gaffer = buildGaffer( [(pipe.apps.prman, version)], boost, download )
#     #         pkgs.gaffer[ gaffer.targetSuffix ] = gaffer
#
#
#
#
#
# #
