#!/bin/bash
#
# This script runs on the initialization of every machine in
# the pipeline.
#
# We use it for global configutation, like instalations and
# system setup of all sorts.
#
# be carefull when editing this file to avoid breaking every
# single machine in the network!!
#
#   author: rhradec april/2013
#

# ========================================================================
# generic action function to display [OK] or [FAILED] at startup!
# ========================================================================
mkdir -p /var/log/pipevfx/
action_tab="%-59s"
action(){
    RESTORE='\033[0m'
    RED='\033[00;31m'
    GREEN='\033[00;32m'
    printf $action_tab "$1"
    mkdir -p /var/log/pipevfx/
    $2 2>&1 > /var/log/pipevfx/$(basename $2)
    if [ $? -gt 0 ]; then
        echo -e "[${RED}FAILED${RESTORE}]"
    else
        echo -e "[${GREEN}  OK  ${RESTORE}]"
    fi
}

# ========================================================================
# redirect output to /var/log/rc_local.log
# ========================================================================
rm -rf /var/log/pipevfx/rc-local.log
# # Close STDOUT file descriptor
exec 1<&-
# # Close STDERR FD
exec 2<&-
# # Open STDOUT as $LOG_FILE file for read and write.
exec 1<>/var/log/pipevfx/rc-local.log
# # Redirect STDERR to STDOUT
exec 2>&1
# ========================================================================

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


# ========================================================================
# figure out the distro and studio name
# ========================================================================
studio=$(dirname $(ls -t /*/.root | tail -1))
if [ -f /etc/fedora-release ] ; then
    release=$(/usr/bin/python2 -c "x=open('/etc/fedora-release').readline().split(' ');print x[0].lower()+x[2]")
elif [ -f /etc/debian_version ] ; then
    release=debian$(cat /etc/debian_version)
elif [ -f /etc/arch-release ] ; then
    # ========================================================================
    # legacy arch rc.local
    # ========================================================================
    release=arch

    # grab boot command line parameters
    getarg(){
        if [ "$(grep '$1' /proc/cmdline)" == "" ] ; then
          [ "$1" == "studio" ] && echo atomo
          [ "$1" == "liveInit" ] && echo "pipeline/tools/init/dracut/liveInit"
        else
          for each in $(echo $(cat /proc/cmdline)) ; do
              [ "$(echo $each | cut -d'=' -f1)" = "$1" ] && echo $(echo $each | cut -d'=' -f2)
          done
        fi
    }
    export studio=$(getarg studio)
    export liveInit=$(getarg liveInit)
fi

# system arch
export arch=$(uname -m)

# system name
export uname=$(echo $(uname -s) |  awk '{print tolower($0)}')

# get tools root path
export root=/$studio

# get tools root path
export tools=$root/pipeline/tools

# get tools root path
export apps=$root/apps/$uname/$arch

# force BASH_SOURCE for debian
export BASH_SOURCE=$tools/init/rc.local


echo "==================================================================="
echo "Running Pipe inits..."
echo "==================================================================="



# ========================================================================
# GENERIC rc.d INITIALIZATION
# ========================================================================
echo -e "\nRunning $tools/init/rc.d/*"
ls $tools/init/rc.d | while read line ; do
    path=$tools/init/rc.d/$line
    action_tab='\t%-51s'
    action $line $path
done



# ========================================================================
# PLATAFORM DEPENDENT INITIALIZATION
# ========================================================================

# ------------------------------------------------------------------------
# if we have scripts for the running os distro release, run then!
# ------------------------------------------------------------------------
# distro/release specific rc.local should initialize the following:
#   1. timezone
#   2. fstab
#   3. autofs
#
# ex: fedora14/rc.local
#
if [ "$release" != "" ] ; then
    action_tab='\t%-51s'
    echo -e "\nRunning $release specific setup..."
    ls $tools/init/$release/ | while read line ; do
        path=$tools/init/$release/$line
        chmod +x $path
        action_tab='\t%-51s'
        action $line $path
    done
    rclocal=$tools/init/$release/rc.local
    # if the current release has an rc.local file, run it!
    if [ -f $rclocal ] ; then
        chmod +x $rclocal
        . $rclocal
    fi
fi

# done
echo "==================================================================="
